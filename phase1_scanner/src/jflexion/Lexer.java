// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: scanner.flex

package jflexion;
import lexical_analyzer.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\2\1\1\22\0\1\3\1\4\1\5"+
    "\3\0\1\6\1\7\2\0\1\10\1\11\1\0\1\11"+
    "\1\12\1\13\1\14\11\15\2\0\1\4\1\16\1\4"+
    "\1\17\1\0\1\20\3\21\1\22\1\21\2\23\1\24"+
    "\2\23\1\25\1\23\1\26\1\23\1\27\1\23\1\30"+
    "\5\23\1\31\2\23\1\0\1\32\2\0\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\23\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\23\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\23\1\0\1\63\10\0\1\2\44\0\1\33"+
    "\12\0\1\33\4\0\1\33\5\0\27\33\1\0\37\33"+
    "\1\0\u01ca\33\4\0\14\33\16\0\5\33\7\0\1\33"+
    "\1\0\1\33\21\0\165\33\1\0\2\33\2\0\4\33"+
    "\1\0\1\33\6\0\1\33\1\0\3\33\1\0\1\33"+
    "\1\0\24\33\1\0\123\33\1\0\213\33\1\0\255\33"+
    "\1\0\46\33\2\0\1\33\6\0\51\33\10\0\55\33"+
    "\1\0\1\33\1\0\2\33\1\0\2\33\1\0\1\33"+
    "\10\0\33\33\4\0\4\33\35\0\13\33\5\0\100\33"+
    "\12\64\4\0\146\33\1\0\10\33\2\0\12\33\1\0"+
    "\6\33\12\64\3\33\2\0\1\33\20\0\73\33\2\0"+
    "\145\33\16\0\12\64\54\33\4\0\1\33\2\0\1\33"+
    "\2\0\56\33\22\0\34\33\4\0\13\33\65\0\25\33"+
    "\1\0\10\33\25\0\17\33\1\0\201\33\2\0\12\64"+
    "\1\0\23\33\1\0\10\33\2\0\2\33\2\0\26\33"+
    "\1\0\7\33\1\0\1\33\3\0\4\33\2\0\11\33"+
    "\2\0\2\33\2\0\4\33\10\0\1\33\4\0\2\33"+
    "\1\0\5\33\2\0\12\64\2\33\12\0\1\33\1\0"+
    "\1\33\2\0\3\33\1\0\6\33\4\0\2\33\2\0"+
    "\26\33\1\0\7\33\1\0\2\33\1\0\2\33\1\0"+
    "\2\33\2\0\1\33\1\0\5\33\4\0\2\33\2\0"+
    "\3\33\3\0\1\33\7\0\4\33\1\0\1\33\7\0"+
    "\12\64\6\33\13\0\3\33\1\0\11\33\1\0\3\33"+
    "\1\0\26\33\1\0\7\33\1\0\2\33\1\0\5\33"+
    "\2\0\12\33\1\0\3\33\1\0\3\33\2\0\1\33"+
    "\17\0\4\33\2\0\12\64\11\0\7\33\1\0\3\33"+
    "\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\2\33\1\0\5\33\2\0\11\33\2\0\2\33"+
    "\2\0\3\33\10\0\2\33\4\0\2\33\1\0\5\33"+
    "\2\0\12\64\1\0\1\33\20\0\2\33\1\0\6\33"+
    "\3\0\3\33\1\0\4\33\3\0\2\33\1\0\1\33"+
    "\1\0\2\33\3\0\2\33\3\0\3\33\3\0\14\33"+
    "\4\0\5\33\3\0\3\33\1\0\4\33\2\0\1\33"+
    "\6\0\1\33\16\0\12\64\20\0\15\33\1\0\3\33"+
    "\1\0\27\33\1\0\20\33\3\0\10\33\1\0\3\33"+
    "\1\0\4\33\7\0\2\33\1\0\3\33\5\0\4\33"+
    "\2\0\12\64\20\0\4\33\1\0\10\33\1\0\3\33"+
    "\1\0\27\33\1\0\12\33\1\0\5\33\2\0\11\33"+
    "\1\0\3\33\1\0\4\33\7\0\2\33\7\0\1\33"+
    "\1\0\4\33\2\0\12\64\1\0\2\33\15\0\4\33"+
    "\1\0\10\33\1\0\3\33\1\0\63\33\1\0\3\33"+
    "\1\0\5\33\5\0\4\33\7\0\5\33\2\0\12\64"+
    "\12\0\6\33\2\0\2\33\1\0\22\33\3\0\30\33"+
    "\1\0\11\33\1\0\1\33\2\0\7\33\3\0\1\33"+
    "\4\0\6\33\1\0\1\33\1\0\10\33\6\0\12\64"+
    "\2\0\2\33\15\0\72\33\5\0\17\33\1\0\12\64"+
    "\47\0\2\33\1\0\1\33\1\0\5\33\1\0\30\33"+
    "\1\0\1\33\1\0\27\33\2\0\5\33\1\0\1\33"+
    "\1\0\6\33\2\0\12\64\2\0\4\33\40\0\1\33"+
    "\27\0\2\33\6\0\12\64\13\0\1\33\1\0\1\33"+
    "\1\0\1\33\4\0\12\33\1\0\44\33\4\0\24\33"+
    "\1\0\22\33\1\0\44\33\11\0\1\33\71\0\100\33"+
    "\12\64\6\0\100\33\12\64\4\33\2\0\46\33\1\0"+
    "\1\33\5\0\1\33\2\0\53\33\1\0\115\33\1\0"+
    "\4\33\2\0\7\33\1\0\1\33\1\0\4\33\2\0"+
    "\51\33\1\0\4\33\2\0\41\33\1\0\4\33\2\0"+
    "\7\33\1\0\1\33\1\0\4\33\2\0\17\33\1\0"+
    "\71\33\1\0\4\33\2\0\103\33\2\0\3\33\40\0"+
    "\20\33\20\0\126\33\2\0\6\33\3\0\u016c\33\2\0"+
    "\21\33\1\0\32\33\5\0\113\33\3\0\13\33\7\0"+
    "\15\33\1\0\7\33\13\0\25\33\13\0\24\33\14\0"+
    "\15\33\1\0\3\33\1\0\2\33\14\0\124\33\3\0"+
    "\1\33\4\0\2\33\2\0\12\64\41\0\3\33\2\0"+
    "\12\64\6\0\131\33\7\0\53\33\5\0\106\33\12\0"+
    "\37\33\1\0\14\33\4\0\14\33\12\0\12\64\36\33"+
    "\2\0\5\33\13\0\54\33\4\0\32\33\6\0\12\64"+
    "\46\0\34\33\4\0\77\33\1\0\35\33\2\0\1\33"+
    "\12\64\6\0\12\64\15\0\1\33\10\0\17\33\101\0"+
    "\114\33\4\0\12\64\21\0\11\33\14\0\60\33\12\64"+
    "\72\33\14\0\70\33\10\0\12\64\3\0\3\33\12\64"+
    "\44\33\2\0\11\33\7\0\53\33\2\0\3\33\20\0"+
    "\3\33\1\0\47\33\5\0\372\33\1\0\33\33\2\0"+
    "\6\33\2\0\46\33\2\0\6\33\2\0\10\33\1\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\37\33\2\0"+
    "\65\33\1\0\7\33\1\0\1\33\3\0\3\33\1\0"+
    "\7\33\3\0\4\33\2\0\6\33\4\0\15\33\5\0"+
    "\3\33\1\0\7\33\53\0\2\2\25\0\2\33\23\0"+
    "\1\33\34\0\1\33\15\0\1\33\20\0\15\33\63\0"+
    "\41\33\21\0\1\33\4\0\1\33\2\0\12\33\1\0"+
    "\1\33\3\0\5\33\6\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\4\33\1\0\13\33\2\0\4\33\5\0"+
    "\5\33\4\0\1\33\21\0\51\33\u022d\0\64\33\26\0"+
    "\57\33\1\0\57\33\1\0\205\33\6\0\11\33\14\0"+
    "\46\33\1\0\1\33\5\0\1\33\2\0\70\33\7\0"+
    "\1\33\17\0\30\33\11\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\1\0\40\33\57\0\1\33\325\0"+
    "\3\33\31\0\17\33\1\0\5\33\2\0\5\33\4\0"+
    "\126\33\2\0\2\33\2\0\3\33\1\0\132\33\1\0"+
    "\4\33\5\0\53\33\1\0\136\33\21\0\33\33\65\0"+
    "\306\33\112\0\360\33\20\0\215\33\103\0\56\33\2\0"+
    "\15\33\3\0\20\33\12\64\2\33\24\0\63\33\1\0"+
    "\12\33\1\0\163\33\45\0\11\33\2\0\147\33\2\0"+
    "\65\33\2\0\5\33\60\0\61\33\30\0\64\33\14\0"+
    "\106\33\12\0\12\64\6\0\30\33\3\0\1\33\1\0"+
    "\3\33\12\64\44\33\2\0\44\33\14\0\35\33\3\0"+
    "\101\33\16\0\1\33\12\64\6\0\20\33\12\64\5\33"+
    "\1\0\67\33\11\0\16\33\2\0\12\64\6\0\27\33"+
    "\3\0\111\33\30\0\3\33\2\0\20\33\2\0\5\33"+
    "\12\0\6\33\2\0\6\33\2\0\6\33\11\0\7\33"+
    "\1\0\7\33\1\0\53\33\1\0\14\33\10\0\173\33"+
    "\1\0\2\33\2\0\12\64\6\0\244\33\14\0\27\33"+
    "\4\0\61\33\4\0\u0100\2\156\33\2\0\152\33\46\0"+
    "\7\33\14\0\5\33\5\0\14\33\1\0\15\33\1\0"+
    "\5\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0"+
    "\154\33\41\0\153\33\22\0\100\33\2\0\66\33\50\0"+
    "\14\33\4\0\20\33\20\0\20\33\3\0\2\33\30\0"+
    "\3\33\40\0\5\33\1\0\207\33\23\0\12\64\7\0"+
    "\32\33\4\0\1\33\1\0\32\33\13\0\131\33\3\0"+
    "\6\33\2\0\6\33\2\0\6\33\2\0\3\33\43\0"+
    "\14\33\1\0\32\33\1\0\23\33\1\0\2\33\1\0"+
    "\17\33\2\0\16\33\42\0\173\33\105\0\65\33\210\0"+
    "\1\33\202\0\35\33\3\0\61\33\17\0\1\33\37\0"+
    "\40\33\15\0\36\33\5\0\53\33\5\0\36\33\2\0"+
    "\44\33\4\0\10\33\1\0\5\33\52\0\236\33\2\0"+
    "\12\64\6\0\44\33\4\0\44\33\4\0\50\33\10\0"+
    "\64\33\234\0\67\33\11\0\26\33\12\0\10\33\230\0"+
    "\6\33\2\0\1\33\1\0\54\33\1\0\2\33\3\0"+
    "\1\33\2\0\27\33\12\0\27\33\11\0\37\33\101\0"+
    "\23\33\1\0\2\33\12\0\26\33\12\0\32\33\106\0"+
    "\70\33\6\0\2\33\100\0\4\33\1\0\2\33\5\0"+
    "\10\33\1\0\3\33\1\0\35\33\2\0\3\33\4\0"+
    "\1\33\40\0\35\33\3\0\35\33\43\0\10\33\1\0"+
    "\36\33\31\0\66\33\12\0\26\33\12\0\23\33\15\0"+
    "\22\33\156\0\111\33\67\0\63\33\15\0\63\33\15\0"+
    "\50\33\10\0\12\64\306\0\35\33\12\0\1\33\10\0"+
    "\41\33\217\0\27\33\11\0\107\33\37\0\12\64\17\0"+
    "\74\33\25\0\31\33\7\0\12\64\6\0\65\33\1\0"+
    "\12\64\4\0\3\33\11\0\44\33\2\0\1\33\11\0"+
    "\105\33\4\0\4\33\3\0\12\64\1\33\1\0\1\33"+
    "\43\0\22\33\1\0\45\33\6\0\1\33\101\0\7\33"+
    "\1\0\1\33\1\0\4\33\1\0\17\33\1\0\12\33"+
    "\7\0\73\33\5\0\12\64\6\0\4\33\1\0\10\33"+
    "\2\0\2\33\2\0\26\33\1\0\7\33\1\0\2\33"+
    "\1\0\5\33\1\0\12\33\2\0\2\33\2\0\3\33"+
    "\2\0\1\33\6\0\1\33\5\0\7\33\2\0\7\33"+
    "\3\0\5\33\213\0\113\33\5\0\12\64\4\0\2\33"+
    "\40\0\106\33\1\0\1\33\10\0\12\64\246\0\66\33"+
    "\2\0\11\33\27\0\6\33\42\0\101\33\3\0\1\33"+
    "\13\0\12\64\46\0\71\33\7\0\12\64\66\0\33\33"+
    "\2\0\17\33\4\0\12\64\306\0\73\33\145\0\100\33"+
    "\12\64\25\0\1\33\240\0\10\33\2\0\56\33\2\0"+
    "\10\33\1\0\2\33\33\0\77\33\10\0\1\33\10\0"+
    "\112\33\3\0\1\33\42\0\71\33\7\0\11\33\1\0"+
    "\55\33\1\0\11\33\17\0\12\64\30\0\36\33\2\0"+
    "\26\33\1\0\16\33\111\0\7\33\1\0\2\33\1\0"+
    "\54\33\3\0\1\33\1\0\2\33\1\0\11\33\10\0"+
    "\12\64\6\0\6\33\1\0\2\33\1\0\45\33\1\0"+
    "\2\33\1\0\6\33\7\0\12\64\u0136\0\27\33\11\0"+
    "\232\33\146\0\157\33\21\0\304\33\274\0\57\33\321\0"+
    "\107\33\271\0\71\33\7\0\37\33\1\0\12\64\146\0"+
    "\36\33\2\0\5\33\13\0\67\33\11\0\4\33\14\0"+
    "\12\64\11\0\25\33\5\0\23\33\260\0\100\33\200\0"+
    "\113\33\4\0\71\33\7\0\21\33\100\0\2\33\1\0"+
    "\1\33\34\0\370\33\10\0\363\33\15\0\37\33\61\0"+
    "\3\33\21\0\4\33\10\0\u018c\33\4\0\153\33\5\0"+
    "\15\33\3\0\11\33\7\0\12\33\3\0\2\33\306\0"+
    "\5\33\3\0\6\33\10\0\10\33\2\0\7\33\36\0"+
    "\4\33\224\0\3\33\273\0\125\33\1\0\107\33\1\0"+
    "\2\33\2\0\1\33\2\0\2\33\2\0\4\33\1\0"+
    "\14\33\1\0\1\33\1\0\7\33\1\0\101\33\1\0"+
    "\4\33\2\0\10\33\1\0\7\33\1\0\34\33\1\0"+
    "\4\33\1\0\5\33\1\0\1\33\3\0\7\33\1\0"+
    "\u0154\33\2\0\31\33\1\0\31\33\1\0\37\33\1\0"+
    "\31\33\1\0\37\33\1\0\31\33\1\0\37\33\1\0"+
    "\31\33\1\0\37\33\1\0\31\33\1\0\10\33\2\0"+
    "\62\64\67\33\4\0\62\33\10\0\1\33\16\0\1\33"+
    "\26\0\5\33\1\0\17\33\120\0\7\33\1\0\21\33"+
    "\2\0\7\33\1\0\2\33\1\0\5\33\325\0\55\33"+
    "\3\0\16\33\2\0\12\64\4\0\1\33\u0171\0\60\33"+
    "\12\64\6\0\305\33\13\0\7\33\51\0\114\33\4\0"+
    "\12\64\246\0\4\33\1\0\33\33\1\0\2\33\1\0"+
    "\1\33\2\0\1\33\1\0\12\33\1\0\4\33\1\0"+
    "\1\33\1\0\1\33\6\0\1\33\4\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\3\33\1\0\2\33\1\0"+
    "\1\33\2\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\2\33\1\0\1\33\2\0"+
    "\4\33\1\0\7\33\1\0\4\33\1\0\4\33\1\0"+
    "\1\33\1\0\12\33\1\0\21\33\5\0\3\33\1\0"+
    "\5\33\1\0\21\33\164\0\32\33\6\0\32\33\6\0"+
    "\32\33\166\0\327\33\51\0\65\33\13\0\336\33\2\0"+
    "\u0182\33\16\0\u0131\33\37\0\36\33\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\3\1\2\6\21\7\1\2\1\10\1\11\1\10\3\0"+
    "\2\6\1\12\2\0\1\12\1\0\15\7\1\13\15\7"+
    "\1\14\1\15\13\0\1\16\1\0\1\6\15\7\1\13"+
    "\12\7\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\15\7\1\31\33\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\237\0\237\0\324\0\237"+
    "\0\u0109\0\237\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247"+
    "\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\237\0\237\0\u0601\0\u0636\0\u066b\0\u0173\0\u06a0"+
    "\0\u06d5\0\u0173\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0247\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\237\0\237\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\237\0\u0f87"+
    "\0\u07a9\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u0247\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\7\1\4"+
    "\6\20\1\21\1\22\1\23\1\20\2\4\1\20\1\24"+
    "\1\25\1\26\1\27\1\30\2\20\1\31\3\20\1\32"+
    "\1\20\1\33\1\34\1\35\1\36\1\20\1\37\1\40"+
    "\2\20\1\41\1\17\1\42\2\0\2\42\1\43\24\42"+
    "\1\44\32\42\1\45\2\0\27\45\1\46\32\45\103\0"+
    "\1\4\54\0\1\4\70\0\1\47\1\0\1\50\1\51"+
    "\46\0\1\51\14\0\2\52\46\0\1\52\10\0\1\53"+
    "\2\0\1\54\63\0\1\55\1\0\2\17\13\0\1\56"+
    "\27\0\1\56\2\0\1\17\12\0\1\55\1\0\2\17"+
    "\46\0\1\17\14\0\2\20\2\0\12\20\1\0\30\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\5\20"+
    "\1\57\22\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\20\20\1\60\7\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\5\20\1\61\22\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\16\20\1\62\1\20"+
    "\1\63\1\20\1\64\5\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\13\20\1\65\2\20\1\66\11\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\16\20"+
    "\1\67\3\20\1\64\5\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\13\20\1\70\12\20\1\71\1\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\1\20"+
    "\1\72\14\20\1\73\11\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\6\20\1\74\5\20\1\75\1\76"+
    "\4\20\1\77\5\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\5\20\1\100\15\20\1\101\4\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\20\20\1\102"+
    "\2\20\1\103\4\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\5\20\1\104\22\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\22\20\1\105\5\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\10\20\1\106"+
    "\7\20\1\107\7\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\16\20\1\110\11\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\10\20\1\111\17\20\1\0"+
    "\1\20\63\0\1\4\6\0\1\112\1\0\1\112\4\0"+
    "\1\112\2\0\1\112\14\0\2\112\3\0\1\112\6\0"+
    "\1\112\2\0\1\112\1\0\1\112\1\0\1\112\14\0"+
    "\1\113\62\0\1\114\1\0\1\113\4\0\1\115\2\0"+
    "\1\116\14\0\1\117\1\120\3\0\1\121\6\0\1\122"+
    "\2\0\1\123\1\0\1\124\1\0\1\125\17\0\1\52"+
    "\1\0\2\51\13\0\1\56\27\0\1\56\2\0\1\51"+
    "\12\0\1\52\1\0\2\51\46\0\1\51\10\53\1\126"+
    "\54\53\1\54\1\127\61\54\1\127\1\54\14\0\2\55"+
    "\4\0\1\130\15\0\1\130\23\0\1\55\14\0\2\131"+
    "\2\0\3\131\11\0\6\131\37\0\2\20\2\0\12\20"+
    "\1\0\25\20\1\132\2\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\11\20\1\133\16\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\1\20\1\134\26\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\16\20"+
    "\1\135\11\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\5\20\1\136\22\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\16\20\1\137\11\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\1\20\1\140\26\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\15\20"+
    "\1\141\12\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\23\20\1\142\4\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\21\20\1\143\6\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\22\20\1\144\5\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\13\20"+
    "\1\145\14\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\20\20\1\74\7\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\17\20\1\146\10\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\22\20\1\147\5\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\16\20"+
    "\1\150\11\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\25\20\1\74\2\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\13\20\1\135\14\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\11\20\1\151\4\20"+
    "\1\152\11\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\2\20\1\153\25\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\22\20\1\154\5\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\20\20\1\155\7\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\11\20"+
    "\1\156\16\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\23\20\1\157\4\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\11\20\1\160\16\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\11\20\1\161\16\20"+
    "\1\0\1\20\7\0\1\162\64\0\1\163\64\0\1\164"+
    "\64\0\1\165\64\0\1\166\64\0\1\167\64\0\1\170"+
    "\64\0\1\171\64\0\1\172\64\0\1\173\55\0\10\53"+
    "\1\126\2\53\1\127\51\53\11\0\1\47\2\0\2\52"+
    "\46\0\1\52\14\0\2\20\2\0\1\174\11\20\1\0"+
    "\30\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\15\20\1\175\12\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\4\20\1\176\23\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\13\20\1\74\14\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\1\20\1\177"+
    "\26\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\11\20\1\74\16\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\21\20\1\156\6\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\22\20\1\200\5\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\2\20\1\161"+
    "\25\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\5\20\1\74\22\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\5\20\1\201\22\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\21\20\1\157\6\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\13\20\1\202"+
    "\14\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\5\20\1\203\22\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\2\20\1\74\1\20\1\74\23\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\24\20\1\204"+
    "\3\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\22\20\1\205\5\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\13\20\1\206\14\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\23\20\1\207\4\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\11\20\1\210"+
    "\16\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\21\20\1\74\6\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\5\20\1\211\22\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\4\20\1\74\23\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\13\20\1\143"+
    "\14\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\20\20\1\212\7\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\22\20\1\74\5\20\1\0\1\20\14\0"+
    "\2\20\2\0\4\20\1\213\1\214\4\20\1\0\30\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\12\20"+
    "\1\74\15\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\11\20\1\215\16\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\15\20\1\216\12\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\5\20\1\217\22\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\20\20"+
    "\1\220\7\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\1\20\1\221\26\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\5\20\1\222\22\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\11\20\1\223\16\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\20\20"+
    "\1\224\7\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\15\20\1\225\12\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\20\20\1\226\7\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\15\20\1\227\12\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\11\20"+
    "\1\230\16\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\15\20\1\231\12\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\4\20\1\156\23\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\14\20\1\232\13\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\6\20"+
    "\1\233\21\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\22\20\1\143\5\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\3\20\1\234\24\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\3\20\1\74\24\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\15\20"+
    "\1\74\12\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\7\20\1\74\20\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\1\20\1\235\26\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\22\20\1\236\5\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\15\20"+
    "\1\143\12\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\23\20\1\143\4\20\1\0\1\20\14\0\2\20"+
    "\2\0\12\20\1\0\5\20\1\237\22\20\1\0\1\20"+
    "\14\0\2\20\2\0\12\20\1\0\1\20\1\240\26\20"+
    "\1\0\1\20\14\0\2\20\2\0\12\20\1\0\22\20"+
    "\1\241\5\20\1\0\1\20\14\0\2\20\2\0\12\20"+
    "\1\0\27\20\1\74\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\5\20\1\242\22\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\15\20\1\243\12\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\3\20\1\143"+
    "\24\20\1\0\1\20\14\0\2\20\2\0\12\20\1\0"+
    "\5\20\1\160\22\20\1\0\1\20\14\0\2\20\2\0"+
    "\12\20\1\0\7\20\1\244\20\20\1\0\1\20\14\0"+
    "\2\20\2\0\12\20\1\0\22\20\1\156\5\20\1\0"+
    "\1\20\14\0\2\20\2\0\12\20\1\0\5\20\1\73"+
    "\22\20\1\0\1\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\1\1\1\11\1\1\1\11\27\1\2\11"+
    "\1\1\3\0\3\1\2\0\1\1\1\0\33\1\2\11"+
    "\13\0\1\11\1\0\31\1\12\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(  new StringBuilder(yytext()), SymbolType.OtherSymbols );
            }
            // fall through
          case 26: break;
          case 2:
            { return new Symbol( new StringBuilder("\n"), SymbolType.NextLine);
            }
            // fall through
          case 27: break;
          case 3:
            { return new Symbol( new StringBuilder(yytext()), SymbolType.Space);
            }
            // fall through
          case 28: break;
          case 4:
            { yybegin( STRING ); return new Symbol( new StringBuilder(yytext()), SymbolType.StringAndChar );
            }
            // fall through
          case 29: break;
          case 5:
            { yybegin( CHARACTER ); return new Symbol( new StringBuilder("\'"), SymbolType.StringAndChar);
            }
            // fall through
          case 30: break;
          case 6:
            { return new Symbol(new StringBuilder(yytext()), SymbolType.IntegerNumbers );
            }
            // fall through
          case 31: break;
          case 7:
            { return new Symbol(new StringBuilder(yytext()), SymbolType.Identifiers);
            }
            // fall through
          case 32: break;
          case 8:
            { return new Symbol( new StringBuilder(yytext()), SymbolType.StringAndChar );
            }
            // fall through
          case 33: break;
          case 9:
            { yybegin( YYINITIAL ); return new Symbol(  new StringBuilder(yytext()), SymbolType.StringAndChar );
            }
            // fall through
          case 34: break;
          case 10:
            { return new Symbol(new StringBuilder(yytext()), SymbolType.RealNumbers );
            }
            // fall through
          case 35: break;
          case 11:
            { return new Symbol(new StringBuilder(yytext()), SymbolType.ReservedKeyWords);
            }
            // fall through
          case 36: break;
          case 12:
            { return new Symbol( new StringBuilder(yytext()), SymbolType.SpecialChar);
            }
            // fall through
          case 37: break;
          case 13:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder(yytext()), SymbolType.StringAndChar );
            }
            // fall through
          case 38: break;
          case 14:
            { return new Symbol( new StringBuilder(yytext()), SymbolType.Comment);
            }
            // fall through
          case 39: break;
          case 15:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\\"'"),SymbolType.SpecialChar);
            }
            // fall through
          case 40: break;
          case 16:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\0'"), SymbolType.SpecialChar);
            }
            // fall through
          case 41: break;
          case 17:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\?'"), SymbolType.SpecialChar);
            }
            // fall through
          case 42: break;
          case 18:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\a'"), SymbolType.SpecialChar);
            }
            // fall through
          case 43: break;
          case 19:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\b'"), SymbolType.SpecialChar);
            }
            // fall through
          case 44: break;
          case 20:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\f'"), SymbolType.SpecialChar);
            }
            // fall through
          case 45: break;
          case 21:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\n'"), SymbolType.SpecialChar);
            }
            // fall through
          case 46: break;
          case 22:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\r'"), SymbolType.SpecialChar);
            }
            // fall through
          case 47: break;
          case 23:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\t'"), SymbolType.SpecialChar);
            }
            // fall through
          case 48: break;
          case 24:
            { yybegin( YYINITIAL ); return new Symbol( new StringBuilder("\\v'"), SymbolType.SpecialChar);
            }
            // fall through
          case 49: break;
          case 25:
            { return new Symbol(new StringBuilder(yytext()), SymbolType.Boolean);
            }
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
