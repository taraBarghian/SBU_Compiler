// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: scanner.flex

import java.io.*;
import java_cup.runtime.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\0\1\1\22\0\1\2\1\3\1\4"+
    "\2\0\1\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\11\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\3\27\1\30\1\27"+
    "\2\31\1\32\2\31\1\33\1\31\1\34\3\31\1\35"+
    "\5\31\1\36\2\31\1\37\1\0\1\40\1\0\1\41"+
    "\1\0\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\31\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\31\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\31\1\71\1\72\1\73\54\0\1\41"+
    "\12\0\1\41\4\0\1\41\5\0\27\41\1\0\37\41"+
    "\1\0\u01ca\41\4\0\14\41\16\0\5\41\7\0\1\41"+
    "\1\0\1\41\21\0\165\41\1\0\2\41\2\0\4\41"+
    "\1\0\1\41\6\0\1\41\1\0\3\41\1\0\1\41"+
    "\1\0\24\41\1\0\123\41\1\0\213\41\1\0\255\41"+
    "\1\0\46\41\2\0\1\41\6\0\51\41\10\0\55\41"+
    "\1\0\1\41\1\0\2\41\1\0\2\41\1\0\1\41"+
    "\10\0\33\41\4\0\4\41\35\0\13\41\5\0\100\41"+
    "\12\74\4\0\146\41\1\0\10\41\2\0\12\41\1\0"+
    "\6\41\12\74\3\41\2\0\1\41\20\0\73\41\2\0"+
    "\145\41\16\0\12\74\54\41\4\0\1\41\2\0\1\41"+
    "\2\0\56\41\22\0\34\41\4\0\13\41\65\0\25\41"+
    "\1\0\10\41\25\0\17\41\1\0\201\41\2\0\12\74"+
    "\1\0\23\41\1\0\10\41\2\0\2\41\2\0\26\41"+
    "\1\0\7\41\1\0\1\41\3\0\4\41\2\0\11\41"+
    "\2\0\2\41\2\0\4\41\10\0\1\41\4\0\2\41"+
    "\1\0\5\41\2\0\12\74\2\41\12\0\1\41\1\0"+
    "\1\41\2\0\3\41\1\0\6\41\4\0\2\41\2\0"+
    "\26\41\1\0\7\41\1\0\2\41\1\0\2\41\1\0"+
    "\2\41\2\0\1\41\1\0\5\41\4\0\2\41\2\0"+
    "\3\41\3\0\1\41\7\0\4\41\1\0\1\41\7\0"+
    "\12\74\6\41\13\0\3\41\1\0\11\41\1\0\3\41"+
    "\1\0\26\41\1\0\7\41\1\0\2\41\1\0\5\41"+
    "\2\0\12\41\1\0\3\41\1\0\3\41\2\0\1\41"+
    "\17\0\4\41\2\0\12\74\11\0\7\41\1\0\3\41"+
    "\1\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41"+
    "\1\0\2\41\1\0\5\41\2\0\11\41\2\0\2\41"+
    "\2\0\3\41\10\0\2\41\4\0\2\41\1\0\5\41"+
    "\2\0\12\74\1\0\1\41\20\0\2\41\1\0\6\41"+
    "\3\0\3\41\1\0\4\41\3\0\2\41\1\0\1\41"+
    "\1\0\2\41\3\0\2\41\3\0\3\41\3\0\14\41"+
    "\4\0\5\41\3\0\3\41\1\0\4\41\2\0\1\41"+
    "\6\0\1\41\16\0\12\74\20\0\15\41\1\0\3\41"+
    "\1\0\27\41\1\0\20\41\3\0\10\41\1\0\3\41"+
    "\1\0\4\41\7\0\2\41\1\0\3\41\5\0\4\41"+
    "\2\0\12\74\20\0\4\41\1\0\10\41\1\0\3\41"+
    "\1\0\27\41\1\0\12\41\1\0\5\41\2\0\11\41"+
    "\1\0\3\41\1\0\4\41\7\0\2\41\7\0\1\41"+
    "\1\0\4\41\2\0\12\74\1\0\2\41\15\0\4\41"+
    "\1\0\10\41\1\0\3\41\1\0\63\41\1\0\3\41"+
    "\1\0\5\41\5\0\4\41\7\0\5\41\2\0\12\74"+
    "\12\0\6\41\2\0\2\41\1\0\22\41\3\0\30\41"+
    "\1\0\11\41\1\0\1\41\2\0\7\41\3\0\1\41"+
    "\4\0\6\41\1\0\1\41\1\0\10\41\6\0\12\74"+
    "\2\0\2\41\15\0\72\41\5\0\17\41\1\0\12\74"+
    "\47\0\2\41\1\0\1\41\1\0\5\41\1\0\30\41"+
    "\1\0\1\41\1\0\27\41\2\0\5\41\1\0\1\41"+
    "\1\0\6\41\2\0\12\74\2\0\4\41\40\0\1\41"+
    "\27\0\2\41\6\0\12\74\13\0\1\41\1\0\1\41"+
    "\1\0\1\41\4\0\12\41\1\0\44\41\4\0\24\41"+
    "\1\0\22\41\1\0\44\41\11\0\1\41\71\0\100\41"+
    "\12\74\6\0\100\41\12\74\4\41\2\0\46\41\1\0"+
    "\1\41\5\0\1\41\2\0\53\41\1\0\115\41\1\0"+
    "\4\41\2\0\7\41\1\0\1\41\1\0\4\41\2\0"+
    "\51\41\1\0\4\41\2\0\41\41\1\0\4\41\2\0"+
    "\7\41\1\0\1\41\1\0\4\41\2\0\17\41\1\0"+
    "\71\41\1\0\4\41\2\0\103\41\2\0\3\41\40\0"+
    "\20\41\20\0\126\41\2\0\6\41\3\0\u016c\41\2\0"+
    "\21\41\1\0\32\41\5\0\113\41\3\0\13\41\7\0"+
    "\15\41\1\0\7\41\13\0\25\41\13\0\24\41\14\0"+
    "\15\41\1\0\3\41\1\0\2\41\14\0\124\41\3\0"+
    "\1\41\4\0\2\41\2\0\12\74\41\0\3\41\2\0"+
    "\12\74\6\0\131\41\7\0\53\41\5\0\106\41\12\0"+
    "\37\41\1\0\14\41\4\0\14\41\12\0\12\74\36\41"+
    "\2\0\5\41\13\0\54\41\4\0\32\41\6\0\12\74"+
    "\46\0\34\41\4\0\77\41\1\0\35\41\2\0\1\41"+
    "\12\74\6\0\12\74\15\0\1\41\10\0\17\41\101\0"+
    "\114\41\4\0\12\74\21\0\11\41\14\0\60\41\12\74"+
    "\72\41\14\0\70\41\10\0\12\74\3\0\3\41\12\74"+
    "\44\41\2\0\11\41\7\0\53\41\2\0\3\41\20\0"+
    "\3\41\1\0\47\41\5\0\372\41\1\0\33\41\2\0"+
    "\6\41\2\0\46\41\2\0\6\41\2\0\10\41\1\0"+
    "\1\41\1\0\1\41\1\0\1\41\1\0\37\41\2\0"+
    "\65\41\1\0\7\41\1\0\1\41\3\0\3\41\1\0"+
    "\7\41\3\0\4\41\2\0\6\41\4\0\15\41\5\0"+
    "\3\41\1\0\7\41\102\0\2\41\23\0\1\41\34\0"+
    "\1\41\15\0\1\41\20\0\15\41\63\0\41\41\21\0"+
    "\1\41\4\0\1\41\2\0\12\41\1\0\1\41\3\0"+
    "\5\41\6\0\1\41\1\0\1\41\1\0\1\41\1\0"+
    "\4\41\1\0\13\41\2\0\4\41\5\0\5\41\4\0"+
    "\1\41\21\0\51\41\u022d\0\64\41\26\0\57\41\1\0"+
    "\57\41\1\0\205\41\6\0\11\41\14\0\46\41\1\0"+
    "\1\41\5\0\1\41\2\0\70\41\7\0\1\41\17\0"+
    "\30\41\11\0\7\41\1\0\7\41\1\0\7\41\1\0"+
    "\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0"+
    "\7\41\1\0\40\41\57\0\1\41\325\0\3\41\31\0"+
    "\17\41\1\0\5\41\2\0\5\41\4\0\126\41\2\0"+
    "\2\41\2\0\3\41\1\0\132\41\1\0\4\41\5\0"+
    "\53\41\1\0\136\41\21\0\33\41\65\0\306\41\112\0"+
    "\360\41\20\0\215\41\103\0\56\41\2\0\15\41\3\0"+
    "\20\41\12\74\2\41\24\0\63\41\1\0\12\41\1\0"+
    "\163\41\45\0\11\41\2\0\147\41\2\0\65\41\2\0"+
    "\5\41\60\0\61\41\30\0\64\41\14\0\106\41\12\0"+
    "\12\74\6\0\30\41\3\0\1\41\1\0\3\41\12\74"+
    "\44\41\2\0\44\41\14\0\35\41\3\0\101\41\16\0"+
    "\1\41\12\74\6\0\20\41\12\74\5\41\1\0\67\41"+
    "\11\0\16\41\2\0\12\74\6\0\27\41\3\0\111\41"+
    "\30\0\3\41\2\0\20\41\2\0\5\41\12\0\6\41"+
    "\2\0\6\41\2\0\6\41\11\0\7\41\1\0\7\41"+
    "\1\0\53\41\1\0\14\41\10\0\173\41\1\0\2\41"+
    "\2\0\12\74\6\0\244\41\14\0\27\41\4\0\61\41"+
    "\4\0\156\41\2\0\152\41\46\0\7\41\14\0\5\41"+
    "\5\0\14\41\1\0\15\41\1\0\5\41\1\0\1\41"+
    "\1\0\2\41\1\0\2\41\1\0\154\41\41\0\153\41"+
    "\22\0\100\41\2\0\66\41\50\0\14\41\4\0\20\41"+
    "\20\0\20\41\3\0\2\41\30\0\3\41\40\0\5\41"+
    "\1\0\207\41\23\0\12\74\7\0\32\41\4\0\1\41"+
    "\1\0\32\41\13\0\131\41\3\0\6\41\2\0\6\41"+
    "\2\0\6\41\2\0\3\41\43\0\14\41\1\0\32\41"+
    "\1\0\23\41\1\0\2\41\1\0\17\41\2\0\16\41"+
    "\42\0\173\41\105\0\65\41\210\0\1\41\202\0\35\41"+
    "\3\0\61\41\17\0\1\41\37\0\40\41\15\0\36\41"+
    "\5\0\53\41\5\0\36\41\2\0\44\41\4\0\10\41"+
    "\1\0\5\41\52\0\236\41\2\0\12\74\6\0\44\41"+
    "\4\0\44\41\4\0\50\41\10\0\64\41\234\0\67\41"+
    "\11\0\26\41\12\0\10\41\230\0\6\41\2\0\1\41"+
    "\1\0\54\41\1\0\2\41\3\0\1\41\2\0\27\41"+
    "\12\0\27\41\11\0\37\41\101\0\23\41\1\0\2\41"+
    "\12\0\26\41\12\0\32\41\106\0\70\41\6\0\2\41"+
    "\100\0\4\41\1\0\2\41\5\0\10\41\1\0\3\41"+
    "\1\0\35\41\2\0\3\41\4\0\1\41\40\0\35\41"+
    "\3\0\35\41\43\0\10\41\1\0\36\41\31\0\66\41"+
    "\12\0\26\41\12\0\23\41\15\0\22\41\156\0\111\41"+
    "\67\0\63\41\15\0\63\41\15\0\50\41\10\0\12\74"+
    "\306\0\35\41\12\0\1\41\10\0\41\41\217\0\27\41"+
    "\11\0\107\41\37\0\12\74\17\0\74\41\25\0\31\41"+
    "\7\0\12\74\6\0\65\41\1\0\12\74\4\0\3\41"+
    "\11\0\44\41\2\0\1\41\11\0\105\41\4\0\4\41"+
    "\3\0\12\74\1\41\1\0\1\41\43\0\22\41\1\0"+
    "\45\41\6\0\1\41\101\0\7\41\1\0\1\41\1\0"+
    "\4\41\1\0\17\41\1\0\12\41\7\0\73\41\5\0"+
    "\12\74\6\0\4\41\1\0\10\41\2\0\2\41\2\0"+
    "\26\41\1\0\7\41\1\0\2\41\1\0\5\41\1\0"+
    "\12\41\2\0\2\41\2\0\3\41\2\0\1\41\6\0"+
    "\1\41\5\0\7\41\2\0\7\41\3\0\5\41\213\0"+
    "\113\41\5\0\12\74\4\0\2\41\40\0\106\41\1\0"+
    "\1\41\10\0\12\74\246\0\66\41\2\0\11\41\27\0"+
    "\6\41\42\0\101\41\3\0\1\41\13\0\12\74\46\0"+
    "\71\41\7\0\12\74\66\0\33\41\2\0\17\41\4\0"+
    "\12\74\306\0\73\41\145\0\100\41\12\74\25\0\1\41"+
    "\240\0\10\41\2\0\56\41\2\0\10\41\1\0\2\41"+
    "\33\0\77\41\10\0\1\41\10\0\112\41\3\0\1\41"+
    "\42\0\71\41\7\0\11\41\1\0\55\41\1\0\11\41"+
    "\17\0\12\74\30\0\36\41\2\0\26\41\1\0\16\41"+
    "\111\0\7\41\1\0\2\41\1\0\54\41\3\0\1\41"+
    "\1\0\2\41\1\0\11\41\10\0\12\74\6\0\6\41"+
    "\1\0\2\41\1\0\45\41\1\0\2\41\1\0\6\41"+
    "\7\0\12\74\u0136\0\27\41\11\0\232\41\146\0\157\41"+
    "\21\0\304\41\274\0\57\41\321\0\107\41\271\0\71\41"+
    "\7\0\37\41\1\0\12\74\146\0\36\41\2\0\5\41"+
    "\13\0\67\41\11\0\4\41\14\0\12\74\11\0\25\41"+
    "\5\0\23\41\260\0\100\41\200\0\113\41\4\0\71\41"+
    "\7\0\21\41\100\0\2\41\1\0\1\41\34\0\370\41"+
    "\10\0\363\41\15\0\37\41\61\0\3\41\21\0\4\41"+
    "\10\0\u018c\41\4\0\153\41\5\0\15\41\3\0\11\41"+
    "\7\0\12\41\3\0\2\41\306\0\5\41\3\0\6\41"+
    "\10\0\10\41\2\0\7\41\36\0\4\41\224\0\3\41"+
    "\273\0\125\41\1\0\107\41\1\0\2\41\2\0\1\41"+
    "\2\0\2\41\2\0\4\41\1\0\14\41\1\0\1\41"+
    "\1\0\7\41\1\0\101\41\1\0\4\41\2\0\10\41"+
    "\1\0\7\41\1\0\34\41\1\0\4\41\1\0\5\41"+
    "\1\0\1\41\3\0\7\41\1\0\u0154\41\2\0\31\41"+
    "\1\0\31\41\1\0\37\41\1\0\31\41\1\0\37\41"+
    "\1\0\31\41\1\0\37\41\1\0\31\41\1\0\37\41"+
    "\1\0\31\41\1\0\10\41\2\0\62\74\67\41\4\0"+
    "\62\41\10\0\1\41\16\0\1\41\26\0\5\41\1\0"+
    "\17\41\120\0\7\41\1\0\21\41\2\0\7\41\1\0"+
    "\2\41\1\0\5\41\325\0\55\41\3\0\16\41\2\0"+
    "\12\74\4\0\1\41\u0171\0\60\41\12\74\6\0\305\41"+
    "\13\0\7\41\51\0\114\41\4\0\12\74\246\0\4\41"+
    "\1\0\33\41\1\0\2\41\1\0\1\41\2\0\1\41"+
    "\1\0\12\41\1\0\4\41\1\0\1\41\1\0\1\41"+
    "\6\0\1\41\4\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\3\41\1\0\2\41\1\0\1\41\2\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\4\41\1\0\7\41"+
    "\1\0\4\41\1\0\4\41\1\0\1\41\1\0\12\41"+
    "\1\0\21\41\5\0\3\41\1\0\5\41\1\0\21\41"+
    "\164\0\32\41\6\0\32\41\6\0\32\41\166\0\327\41"+
    "\51\0\65\41\13\0\336\41\2\0\u0182\41\16\0\u0131\41"+
    "\37\0\36\41\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\3\22\1\23\1\24\15\22"+
    "\1\25\1\1\1\26\1\27\1\30\1\31\2\0\2\32"+
    "\1\0\1\33\1\34\1\35\2\22\1\36\13\22\1\37"+
    "\15\22\1\40\1\14\14\22\1\41\1\22\1\42\1\22"+
    "\1\43\15\22\1\44\6\22\1\45\5\22\1\46\7\22"+
    "\1\47\1\50\1\51\3\22\1\52\1\0\1\53\2\22"+
    "\1\0\3\22\2\0\1\54\6\22\1\55\2\22\1\56"+
    "\1\22\1\57\1\60\3\22\1\61\1\62\2\22\1\63"+
    "\1\22\1\64\1\65\3\22\1\66\2\22\1\67\4\22"+
    "\1\70\4\22\1\0\2\22\1\71\1\72\1\0\1\73"+
    "\1\22\1\74\1\75\1\22\1\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\364\0\75\0\75"+
    "\0\75\0\u0131\0\75\0\u0131\0\u016e\0\75\0\u01ab\0\u01e8"+
    "\0\75\0\75\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\75\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\75"+
    "\0\u06e9\0\75\0\75\0\75\0\75\0\u016e\0\u0726\0\u016e"+
    "\0\u0763\0\u07a0\0\75\0\75\0\75\0\u07dd\0\u081a\0\75"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u02dc\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\75\0\u07a0\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u02dc"+
    "\0\u10eb\0\u1128\0\u1165\0\u02dc\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u02dc\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec"+
    "\0\u02dc\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u02dc\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u02dc\0\u02dc"+
    "\0\u02dc\0\u1905\0\u1942\0\u197f\0\u02dc\0\u19bc\0\u02dc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u02dc"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u02dc\0\u1d4f"+
    "\0\u1d8c\0\75\0\u1dc9\0\u02dc\0\75\0\u1e06\0\u1e43\0\u1e80"+
    "\0\75\0\75\0\u1ebd\0\u1efa\0\u02dc\0\u1f37\0\u02dc\0\u02dc"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u02dc\0\u202b\0\u2068\0\u02dc\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u02dc\0\u2199\0\u21d6\0\u2213\0\u2250"+
    "\0\u228d\0\u22ca\0\u2307\0\u02dc\0\u02dc\0\u2344\0\75\0\u2381"+
    "\0\u02dc\0\75\0\u23be\0\u23fb\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\6\26\1\27\1\30"+
    "\1\26\1\31\1\32\1\0\1\26\1\33\1\34\1\35"+
    "\1\36\1\37\2\26\1\40\3\26\1\41\1\26\1\42"+
    "\1\43\1\44\1\45\1\26\1\46\1\47\2\26\1\50"+
    "\1\51\1\52\1\20\121\0\1\53\50\0\1\4\1\0"+
    "\2\4\1\54\65\4\1\0\2\4\6\0\1\55\103\0"+
    "\1\56\1\0\2\57\53\0\1\57\17\0\2\60\53\0"+
    "\1\60\15\0\1\61\1\0\2\20\15\0\1\62\30\0"+
    "\1\62\4\0\1\20\15\0\1\61\1\0\2\20\53\0"+
    "\1\20\24\0\1\63\74\0\1\64\74\0\1\65\67\0"+
    "\2\26\5\0\11\26\2\0\30\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\5\26\1\66\22\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\5\26\1\67"+
    "\22\26\3\0\1\26\40\0\1\70\53\0\2\26\5\0"+
    "\11\26\2\0\16\26\1\71\1\26\1\72\1\26\1\73"+
    "\5\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\13\26\1\74\2\26\1\75\11\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\16\26\1\76\3\26\1\77"+
    "\5\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\13\26\1\100\12\26\1\101\1\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\1\26\1\102\14\26\1\103"+
    "\11\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\6\26\1\104\5\26\1\105\1\106\4\26\1\107\5\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\5\26"+
    "\1\110\15\26\1\111\4\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\20\26\1\112\2\26\1\113\4\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\5\26"+
    "\1\114\22\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\22\26\1\115\5\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\10\26\1\116\7\26\1\117\7\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\16\26"+
    "\1\120\11\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\10\26\1\121\17\26\3\0\1\26\72\0\1\122"+
    "\17\0\1\60\1\0\2\57\53\0\1\57\17\0\2\61"+
    "\7\0\1\56\15\0\1\56\25\0\1\61\17\0\2\123"+
    "\5\0\3\123\11\0\6\123\44\0\2\26\5\0\11\26"+
    "\2\0\25\26\1\124\2\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\1\26\1\125\26\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\16\26\1\126\11\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\5\26"+
    "\1\127\22\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\16\26\1\130\11\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\1\26\1\131\26\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\15\26\1\132\12\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\23\26"+
    "\1\133\4\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\16\26\1\134\11\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\21\26\1\135\6\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\22\26\1\136\5\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\13\26"+
    "\1\137\14\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\20\26\1\140\7\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\17\26\1\141\10\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\22\26\1\142\5\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\16\26"+
    "\1\143\11\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\25\26\1\144\2\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\13\26\1\145\14\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\11\26\1\146\4\26"+
    "\1\147\11\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\2\26\1\150\25\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\1\26\1\151\20\26\1\152\5\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\20\26"+
    "\1\153\7\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\11\26\1\154\16\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\23\26\1\155\4\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\11\26\1\156\16\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\11\26"+
    "\1\157\16\26\3\0\1\26\17\0\2\26\5\0\1\160"+
    "\10\26\2\0\30\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\4\26\1\161\23\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\13\26\1\162\14\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\1\26\1\163"+
    "\26\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\11\26\1\164\16\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\21\26\1\165\6\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\22\26\1\166\5\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\2\26\1\167"+
    "\25\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\11\26\1\170\16\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\5\26\1\171\22\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\5\26\1\172\22\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\21\26\1\155"+
    "\6\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\13\26\1\173\14\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\5\26\1\174\22\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\2\26\1\175\1\26\1\176"+
    "\23\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\13\26\1\177\14\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\15\26\1\200\6\26\1\201\3\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\22\26\1\202"+
    "\5\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\13\26\1\203\14\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\4\26\1\204\23\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\23\26\1\205\4\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\11\26\1\206"+
    "\16\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\21\26\1\207\6\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\5\26\1\210\22\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\4\26\1\211\23\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\13\26\1\212"+
    "\14\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\20\26\1\213\7\26\3\0\1\26\17\0\2\26\5\0"+
    "\4\26\1\214\4\26\2\0\30\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\12\26\1\215\15\26\3\0"+
    "\1\26\7\0\1\216\7\0\2\26\5\0\11\26\2\0"+
    "\30\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\21\26\1\217\6\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\11\26\1\220\16\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\13\26\1\221\14\26\3\0"+
    "\1\26\7\0\1\222\7\0\2\26\5\0\11\26\2\0"+
    "\30\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\15\26\1\223\12\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\5\26\1\224\22\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\20\26\1\225\7\26\3\0"+
    "\1\26\7\0\1\226\7\0\2\26\5\0\11\26\2\0"+
    "\30\26\3\0\1\26\7\0\1\227\7\0\2\26\5\0"+
    "\11\26\2\0\30\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\22\26\1\230\5\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\1\26\1\231\26\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\5\26\1\232"+
    "\22\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\11\26\1\233\16\26\3\0\1\26\17\0\2\26\5\0"+
    "\5\26\1\234\3\26\2\0\30\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\20\26\1\235\7\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\15\26\1\236"+
    "\12\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\5\26\1\237\22\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\20\26\1\240\7\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\15\26\1\241\12\26\3\0"+
    "\1\26\10\0\1\242\103\0\2\26\5\0\11\26\2\0"+
    "\15\26\1\243\12\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\5\26\1\244\22\26\3\0\1\26\10\0"+
    "\1\245\103\0\2\26\5\0\11\26\2\0\4\26\1\246"+
    "\23\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\14\26\1\247\13\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\6\26\1\250\21\26\3\0\1\26\10\0"+
    "\1\251\74\0\1\252\103\0\2\26\5\0\11\26\2\0"+
    "\22\26\1\253\5\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\3\26\1\254\24\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\3\26\1\255\24\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\11\26\1\256"+
    "\16\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\15\26\1\257\12\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\7\26\1\260\20\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\1\26\1\261\26\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\22\26\1\262"+
    "\5\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\23\26\1\263\4\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\21\26\1\264\6\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\5\26\1\265\22\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\1\26\1\266"+
    "\26\26\3\0\1\26\17\0\2\26\5\0\11\26\2\0"+
    "\5\26\1\267\22\26\3\0\1\26\17\0\2\26\5\0"+
    "\11\26\2\0\22\26\1\270\5\26\3\0\1\26\17\0"+
    "\2\26\5\0\11\26\2\0\15\26\1\271\12\26\3\0"+
    "\1\26\17\0\2\26\5\0\11\26\2\0\27\26\1\272"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\5\26"+
    "\1\273\22\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\5\26\1\274\22\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\15\26\1\275\12\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\3\26\1\276\24\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\5\26"+
    "\1\277\22\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\5\26\1\300\22\26\3\0\1\26\7\0\1\301"+
    "\7\0\2\26\5\0\11\26\2\0\30\26\3\0\1\26"+
    "\17\0\2\26\5\0\11\26\2\0\7\26\1\302\20\26"+
    "\3\0\1\26\17\0\2\26\5\0\11\26\2\0\22\26"+
    "\1\303\5\26\3\0\1\26\17\0\2\26\5\0\11\26"+
    "\2\0\5\26\1\304\22\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\4\26\1\305\23\26\3\0\1\26"+
    "\7\0\1\306\7\0\2\26\5\0\11\26\2\0\30\26"+
    "\3\0\1\26\10\0\1\307\103\0\2\26\5\0\11\26"+
    "\2\0\5\26\1\310\22\26\3\0\1\26\17\0\2\26"+
    "\5\0\11\26\2\0\21\26\1\311\6\26\3\0\1\26"+
    "\10\0\1\312\103\0\2\26\5\0\11\26\2\0\20\26"+
    "\1\313\7\26\3\0\1\26\7\0\1\314\7\0\2\26"+
    "\5\0\11\26\2\0\30\26\3\0\1\26\10\0\1\315"+
    "\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\0\1\11\1\0\3\11\1\1"+
    "\1\11\2\1\1\11\2\1\2\11\7\1\1\11\15\1"+
    "\1\11\1\1\4\11\2\0\2\1\1\0\3\11\2\1"+
    "\1\11\31\1\1\11\73\1\1\0\3\1\1\0\3\1"+
    "\2\0\12\1\1\11\2\1\1\11\3\1\2\11\26\1"+
    "\1\0\4\1\1\0\1\11\2\1\1\11\1\1\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

public Symbol token(int tokenType){
     // System.out.println(yytext());
      return new Symbol (tokenType );
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 63: break;
          case 2:
            { return token(sym.NOT);
            }
            // fall through
          case 64: break;
          case 3:
            { return token(sym.MOD);
            }
            // fall through
          case 65: break;
          case 4:
            { return token(sym.PARENTHESES_OPEN);
            }
            // fall through
          case 66: break;
          case 5:
            { return token(sym.PARENTHESES_CLOSE);
            }
            // fall through
          case 67: break;
          case 6:
            { return token(sym.TIMES);
            }
            // fall through
          case 68: break;
          case 7:
            { return token(sym.PLUS);
            }
            // fall through
          case 69: break;
          case 8:
            { return token(sym.COMA);
            }
            // fall through
          case 70: break;
          case 9:
            { return token(sym.MINUS);
            }
            // fall through
          case 71: break;
          case 10:
            { return token(sym.DOT);
            }
            // fall through
          case 72: break;
          case 11:
            { return token(sym.DEVIDE);
            }
            // fall through
          case 73: break;
          case 12:
            { return token(sym.intConstant);
            }
            // fall through
          case 74: break;
          case 13:
            { return token(sym.COLON);
            }
            // fall through
          case 75: break;
          case 14:
            { return token(sym.SEMI);
            }
            // fall through
          case 76: break;
          case 15:
            { return token(sym.LT);
            }
            // fall through
          case 77: break;
          case 16:
            { return token(sym.EQ);
            }
            // fall through
          case 78: break;
          case 17:
            { return token(sym.GT);
            }
            // fall through
          case 79: break;
          case 18:
            { return token(sym.IDENT);
            }
            // fall through
          case 80: break;
          case 19:
            { return token(sym.BRACKETS_OPEN);
            }
            // fall through
          case 81: break;
          case 20:
            { return token(sym.BRACKETS_CLOSE);
            }
            // fall through
          case 82: break;
          case 21:
            { return token(sym.BRACES_OPEN);
            }
            // fall through
          case 83: break;
          case 22:
            { return token(sym.BRACES_CLOSE);
            }
            // fall through
          case 84: break;
          case 23:
            { return token(sym.NOTEQ);
            }
            // fall through
          case 85: break;
          case 24:
            { return token(sym.stringConstant);
            }
            // fall through
          case 86: break;
          case 25:
            { return token(sym.AND);
            }
            // fall through
          case 87: break;
          case 26:
            { return token(sym.doubleConstant);
            }
            // fall through
          case 88: break;
          case 27:
            { return token(sym.LTEQ);
            }
            // fall through
          case 89: break;
          case 28:
            { return token(sym.EQEQ);
            }
            // fall through
          case 90: break;
          case 29:
            { return token(sym.GTEQ);
            }
            // fall through
          case 91: break;
          case 30:
            { return token(sym.BOTH_BRACKETS);
            }
            // fall through
          case 92: break;
          case 31:
            { return token(sym.IF);
            }
            // fall through
          case 93: break;
          case 32:
            { return token(sym.OR);
            }
            // fall through
          case 94: break;
          case 33:
            { return token(sym.FOR);
            }
            // fall through
          case 95: break;
          case 34:
            { return token(sym.INT);
            }
            // fall through
          case 96: break;
          case 35:
            { return token(sym.NEW);
            }
            // fall through
          case 97: break;
          case 36:
            { return token(sym.BOOL);
            }
            // fall through
          case 98: break;
          case 37:
            { return token(sym.ELSE);
            }
            // fall through
          case 99: break;
          case 38:
            { return token(sym.NULL);
            }
            // fall through
          case 100: break;
          case 39:
            { return token(sym.THIS);
            }
            // fall through
          case 101: break;
          case 40:
            { return token(sym.boolConstant);
            }
            // fall through
          case 102: break;
          case 41:
            { return token(sym.VOID);
            }
            // fall through
          case 103: break;
          case 42:
            { return token(sym.BREAK);
            }
            // fall through
          case 104: break;
          case 43:
            { return token(sym.CLASS);
            }
            // fall through
          case 105: break;
          case 44:
            { return token(sym.PRINT);
            }
            // fall through
          case 106: break;
          case 45:
            { return token(sym.WHILE);
            }
            // fall through
          case 107: break;
          case 46:
            { return token(sym.btoi);
            }
            // fall through
          case 108: break;
          case 47:
            { return token(sym.DOUBLE);
            }
            // fall through
          case 109: break;
          case 48:
            { return token(sym.dtoi);
            }
            // fall through
          case 110: break;
          case 49:
            { return token(sym.itob);
            }
            // fall through
          case 111: break;
          case 50:
            { return token(sym.itod);
            }
            // fall through
          case 112: break;
          case 51:
            { return token(sym.PUBLIC);
            }
            // fall through
          case 113: break;
          case 52:
            { return token(sym.RETURN);
            }
            // fall through
          case 114: break;
          case 53:
            { return token(sym.STRING);
            }
            // fall through
          case 115: break;
          case 54:
            { return token(sym.EXTENDS);
            }
            // fall through
          case 116: break;
          case 55:
            { return token(sym.PRIVATE);
            }
            // fall through
          case 117: break;
          case 56:
            { return token(sym.CONTINUE);
            }
            // fall through
          case 118: break;
          case 57:
            { return token(sym.INTERFACE);
            }
            // fall through
          case 119: break;
          case 58:
            { return token(sym.PROTECTED);
            }
            // fall through
          case 120: break;
          case 59:
            { return token(sym.NewArray);
            }
            // fall through
          case 121: break;
          case 60:
            { return token(sym.IMPLEMENTS);
            }
            // fall through
          case 122: break;
          case 61:
            { return token(sym.readLine);
            }
            // fall through
          case 123: break;
          case 62:
            { return token(sym.ReadInteger);
            }
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
